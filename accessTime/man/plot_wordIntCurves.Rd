% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/access-functions.R
\name{plot_wordIntCurves}
\alias{plot_wordIntCurves}
\title{Plot intelligibility curves for individual words}
\usage{
plot_wordIntCurves(accFit, int_curve, title = "")
}
\arguments{
\item{accFit}{\emph{accessFit.}
\code{\link[accessTime]{accessFit}} object.}

\item{int_curve}{\emph{data.frame.}
Data frame with following three variables:
\describe{
\item{t}{PTT time in seconds.
Corrected such that 0 s corresponds to the beginning of the
word under test.}
\item{I}{Intelligibility}
\item{speaker}{Speaker word pair, e.g. 'F1 hook`}}}

\item{title}{\emph{Character.} Title for plot}
}
\value{
\emph{ggplot} object
}
\description{
Plot intelligibility curves for individual words associated with access
delay measurement. Useful to see the contributions of each word towards
final intelligibility curve results.
}
\examples{
# Path to included raw data
raw_path <- system.file("extdata", "Measurements", package = "accessTime")

# All included raw data tests
raw_testNames <- list.files(raw_path)

# Full path to each test
raw_testPath <- file.path(raw_path,raw_testNames)

# Session CSV Files for each raw test
raw_sessionFiles <- lapply(raw_testPath,list.files)

# Full path to all session files for each test
sessionFiles <- mapply(function(x,y){file.path(x,y)},raw_testPath,raw_sessionFiles,SIMPLIFY = FALSE)
names(sessionFiles) <- raw_testNames

# Directory to audio clip wav files and cut points
cutDir <- system.file("extdata", "Audio_Clips", package="accessTime")

 # Calculate accessFit objects for each technology
all_dat <- lapply(sessionFiles,# Inputs
     function(sesh){process_accessData(sesh,cutDir)})

# Calculate accessFit objects for each individual word
all_dat_indv <- lapply(sessionFiles, function(sesh){
  lapply(sesh,function(word){
   process_accessData(word,cutDir)
 })
})

# Time Vector
times <- seq(from=-0.5,to=2,by=0.01)

# Calculate Intelligibility for each curve
I_ts_indv <- lapply(all_dat_indv,
                 function(tech){
                     lapply(tech,function(word){
                         eval_intell(word,times)
                      })
                  })
for(tech in 1:length(I_ts_indv)){
    # Name the words in the lists
    names(I_ts_indv[[tech]]) <- sapply(all_dat_indv[[tech]],function(x){x$speaker_word})
    for(word in 1:length(I_ts_indv[[tech]])){
    # Assign speaker word combo to the data frames
        I_ts_indv[[tech]][[word]]$speaker <- all_dat_indv[[tech]][[word]]$speaker_word
    }
}
# Make one data frame for each technology
intell_dat_words <- lapply(I_ts_indv,
    function(x){do.call("rbind", x)})

plotNames <- names(all_dat)

# Make individual word pltos
Int_plots_split<- mapply(plot_wordIntCurves,
    all_dat,intell_dat_words,plotNames,
    SIMPLIFY = FALSE)

}
